#pragma once


#include <windows.h>


namespace D3D7
{
#undef DIRECT3D_VERSION
#define DIRECT3D_VERSION         0x0700
#undef D3DCOLOR_DEFINED
#undef D3DCOLORVALUE_DEFINED
#undef D3DVECTOR_DEFINED
#undef D3DRECT_DEFINED
#undef D3DMATRIX_DEFINED

#undef D3DFVF_POSITION_MASK
#undef D3DFVF_RESERVED2
#undef D3DERR_WRONGTEXTUREFORMAT 
#undef D3DERR_UNSUPPORTEDCOLOROPERATION 
#undef D3DERR_UNSUPPORTEDCOLORARG
#undef D3DERR_UNSUPPORTEDALPHAOPERATION 
#undef D3DERR_UNSUPPORTEDALPHAARG
#undef D3DERR_TOOMANYOPERATIONS 
#undef D3DERR_CONFLICTINGTEXTUREFILTER 
#undef D3DERR_UNSUPPORTEDFACTORVALUE 
#undef D3DERR_CONFLICTINGRENDERSTATE 
#undef D3DERR_UNSUPPORTEDTEXTUREFILTER 
#undef D3DERR_CONFLICTINGTEXTUREPALETTE 
#undef D3D_OK

#include <d3d.h>

#undef D3DFVF_POSITION_MASK
#undef D3DFVF_RESERVED2
#undef D3DERR_WRONGTEXTUREFORMAT 
#undef D3DERR_UNSUPPORTEDCOLOROPERATION 
#undef D3DERR_UNSUPPORTEDCOLORARG
#undef D3DERR_UNSUPPORTEDALPHAOPERATION 
#undef D3DERR_UNSUPPORTEDALPHAARG
#undef D3DERR_TOOMANYOPERATIONS 
#undef D3DERR_CONFLICTINGTEXTUREFILTER 
#undef D3DERR_UNSUPPORTEDFACTORVALUE 
#undef D3DERR_CONFLICTINGRENDERSTATE 
#undef D3DERR_UNSUPPORTEDTEXTUREFILTER 
#undef D3DERR_CONFLICTINGTEXTUREPALETTE 
#undef D3D_OK
CONST DWORD D3DFVF_POSITION_MASK = 0x00E;
CONST DWORD D3DFVF_RESERVED2 = 0xf000;

CONST HRESULT D3DERR_WRONGTEXTUREFORMAT = MAKE_DDHRESULT(2072);
CONST HRESULT D3DERR_UNSUPPORTEDCOLOROPERATION = MAKE_DDHRESULT(2073);
CONST HRESULT D3DERR_UNSUPPORTEDCOLORARG = MAKE_DDHRESULT(2074);
CONST HRESULT D3DERR_UNSUPPORTEDALPHAOPERATION = MAKE_DDHRESULT(2075);
CONST HRESULT D3DERR_UNSUPPORTEDALPHAARG = MAKE_DDHRESULT(2076);
CONST HRESULT D3DERR_TOOMANYOPERATIONS = MAKE_DDHRESULT(2077);
CONST HRESULT D3DERR_CONFLICTINGTEXTUREFILTER = MAKE_DDHRESULT(2078);
CONST HRESULT D3DERR_UNSUPPORTEDFACTORVALUE = MAKE_DDHRESULT(2079);
CONST HRESULT D3DERR_CONFLICTINGRENDERSTATE = MAKE_DDHRESULT(2081);
CONST HRESULT D3DERR_UNSUPPORTEDTEXTUREFILTER = MAKE_DDHRESULT(2082);
CONST HRESULT D3DERR_CONFLICTINGTEXTUREPALETTE = MAKE_DDHRESULT(2086);
CONST HRESULT D3D_OK = DD_OK;


__forceinline BOOL operator == (CONST DDPIXELFORMAT& v1, CONST DDPIXELFORMAT& v2)
{
	if (v1.dwSize != v2.dwSize)
		return FALSE;

	if (v1.dwFlags != v2.dwFlags)
		return FALSE;

	if ((v1.dwFlags & DDPF_FOURCC) && v1.dwFourCC != v2.dwFourCC)
		return FALSE;

	if ((v1.dwFlags & DDPF_RGB)
		&& (v1.dwRGBBitCount != v2.dwRGBBitCount || v1.dwRBitMask != v2.dwRBitMask
			|| v1.dwBBitMask != v2.dwBBitMask || v1.dwGBitMask != v2.dwGBitMask))
		return FALSE;

	if ((v1.dwFlags & DDPF_ALPHAPIXELS) && v1.dwRGBAlphaBitMask != v2.dwRGBAlphaBitMask)
		return FALSE;

	return TRUE;
}


#undef DIRECT3D_VERSION
};
